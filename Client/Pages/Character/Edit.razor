@page "/Characters/Edit/{CharacterId:int}"
@using Microsoft.AspNetCore.Authorization
@using RPGCharacterBuilderWebApp1.Shared.Models.Character
@attribute [Authorize]
@inject HttpClient http
@using RPGCharacterBuilderWebApp1.Shared.Models.Armor
@using RPGCharacterBuilderWebApp1.Shared.Models.MagicItem
@using RPGCharacterBuilderWebApp1.Shared.Models.Weapon
@inject NavigationManager navigation

<h3>Edit Character: @Model.Name</h3>

@if (errorMessage != null)
{
    <h5 class="text-danger">@errorMessage</h5>
}

@if (Armors == null && weapons == null && magicItems == null)
{
    <pm><em>Loading...</em></pm>
}
else
{
<div class="container">
    <EditForm Model="@Model" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label>Name</label>
            <InputText class="form-control" @bind-Value="Model.Name" />
        </div>
        <div class="form-group">
            <label>Health</label>
            <InputNumber class="form-control" @bind-Value="Model.Health" />
        </div>
          <div class="form-group">
            <label>Strength</label>
            <InputNumber class="form-control" @bind-Value="Model.Strength" />
        </div>
          <div class="form-group">
            <label>Stamina</label>
            <InputNumber class="form-control" @bind-Value="Model.Stamina" />
        </div>
          <div class="form-group">
            <label>Speed</label>
            <InputNumber class="form-control" @bind-Value="Model.Speed" />
        </div>
          <div class="form-group">
            <label>Mana</label>
            <InputNumber class="form-control" @bind-Value="Model.Mana" />
        </div>
        <InputSelect class="form-control" @bind-Value="@Model.ArmorId">
            @foreach (var armor in Armors)
            {
                <option value="@armor.Id">@armor.Name</option>
            }
        </InputSelect>
        <InputSelect class="form-control" @bind-Value="@Model.WeaponId">
            @foreach (var weapon in weapons)
            {
                <option value="@weapon.Id">@weapon.Name</option>
            }
        </InputSelect>
        <InputSelect class="form-control" @bind-Value="@Model.MagicItemId">
            @foreach (var magicItem in magicItems)
            {
                <option value="@magicItem.Id">@magicItem.Name</option>
            }
        </InputSelect>
        <button type="submit" class="btn btn-primary btn-block mt-5">Submit</button>
    </EditForm>
</div>
}
    
@code {
    [Parameter]
    public int CharacterId { get; set; }
    private CharacterEdit Model { get; set; }
    private IEnumerable<ArmorListItem> Armors { get; set; }
    private IEnumerable<WeaponListItem> weapons;
    private IEnumerable<MagicItemListItem> magicItems;
    private string errorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model = await http.GetFromJsonAsync<CharacterEdit>($"/api/armor/{CharacterId}");
        Armors = await http.GetFromJsonAsync<IEnumerable<ArmorListItem>>("/api/armor/");
        weapons = await http.GetFromJsonAsync<IEnumerable<WeaponListItem>>("/api/weapons");
        magicItems = await http.GetFromJsonAsync<IEnumerable<MagicItemListItem>>("/api/magicitems");
    }

    private async void HandleSubmit()
    {
        var createRes = await http.PostAsJsonAsync<CharacterEdit>($"/api/characters/edit/{CharacterId}", Model);
        if (createRes.IsSuccessStatusCode)
        {
            navigation.NavigateTo($"/characters/{CharacterId}");
        }
        else
        {
            errorMessage = "Could not create a character right now. Please try again later.";
        }
    }
}
